" Install Plug
let data_dir = '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Using Plug
" Run 'do' to run shell commands with quotes, vim commands (:), or a callback
" Examples:
" Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

call plug#begin()

" Colorschemes
Plug 'catppuccin/vim', { 'as': 'catppuccin' } 
Plug 'ghifarit53/tokyonight-vim'

" Tabline
Plug 'vim-airline/vim-airline'
" File Explorer (toggle with 
Plug 'preservim/nerdtree'
" Fuzzy file, buffer, mru, tag, etc finder
Plug 'ctrlpvim/ctrlp.vim'
" Language pack for multiple languages
Plug 'sheerun/vim-polyglot'
" Seamlessly switch between vim and tmux panes
Plug 'christoomey/vim-tmux-navigator'

call plug#end()

" Function to set plugin after they finish loading and vim enters
function RunOnVimEnter()
  " Tokyonight
  let g:tokyonight_style = 'night' " available: night, storm
  "let g:tokyonight_enable_italic = 1
  "let g:tokyonight_transparent_background = 0
  colorscheme tokyonight
  let g:airline_theme = "tokyonight"

  " Catppuccin 
  " colorscheme catppuccin_mocha
  " let g:airline_theme = "catppuccin_mocha"
  " You can save color schemes in:
  " /home/nelsonfleig/.vim/colors
endfunction

" Keep 1000 items in the history.
set history=1000

" show the cursor position
set ruler

" highlight cursor line and active line number
set cursorline

" show incomplete commands.
set showcmd

" shows a menu when using tab completion
set wildmenu

set scrolloff=5

set hlsearch
set incsearch
set ignorecase
set smartcase

" turn on line numbering
set number
set relativenumber

" Backup before overwriting. Default suffix is ~
"set backup
"set bex=_bkp

" Linebreak
set linebreak

" Use spaces instead of tabs
set expandtab

" Enable smart tabs
set smarttab

" Make a tab equal to 2 spaces
set shiftwidth=2
set tabstop=2

" Indentation
set autoindent
set smartindent

" Adapt to color scheme
"set bg=light
set bg=dark

" Color scheme
set termguicolors

" Syntax highlighting
syntax on

"map KEY KEYSTROKES
map <F2> iHi<CR>My Name is<CR>What<CR>My name is<CR>Who<CR>Slim Shady<ESC>

" Navigate windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Leader (must be set before referencing, else will use default of "\")
let mapleader=" "
map <leader>w :w!<CR>
noremap <leader>e :NERDTreeToggle<CR>

" Run post plugin install function on VimEnter
autocmd VimEnter * ++nested  call RunOnVimEnter()
